###########################################
######### SOM Algorithm ###################
###########################################

som.fun <- function (V, som_size, ... ) {

######Step 1. Initialization & Input Parameters####
###################################################
  
## Scale data in [0,1]
  
min_V <- 0  
max_V <- rowSums(V)
V <- apply(V, 2, function(x) (ifelse (x!=0, (x-min_V)/(max_V-min_V), 0))) # how scaling is defined
n <-dim(V)[1]
m <- dim(V)[2]

## Build som grid (3D array)
# Define how many dimensions som grid will have
if (length(som_size) >= 2) {
  som_size_x <- som_size[1]
  som_size_y <- som_size[2]
  
} else {
  
  som_size_x <- som_size[1]
  som_size_y <- som_size[1]
}

# Generate som grid (3D array)
R <- array(runif(som_size_x*som_size_y*dim(V)[2]), dim=c(som_size_x, som_size_y, dim(V)[2]))

# Calculate radius
alpha <- 1.3
radius <- min(som_size_x, som_size_y)*alpha

# Calculate maximal number of iterations for clustering (it will be iterated till alpha=0.05)
iter = 0
max_iter=100*n
reject_factor <- exp((log(0.05) - log(alpha))/max_iter)

# Build a vector of length m containing all zeros
z <- rep(0,m) # random elements from input matrix
v <- rep(0,m) # future cluster for grouping input data

# Matrix B counts how often the cluster v was selected (i.e., how many data points were included into the cluster)
B <- matrix(rep(0,som_size_x*som_size_y), ncol=som_size_y)

#############################
##### Step 2. Algorithm #####

continue <- TRUE
while(continue) {
  
  # Choose a random element z (index) from V
  
  i=round(runif(1)*(n-1))+1
  z <- V[i,]
  i_best <- vector();j_best <-vector()
  
  #  Search in matrix R for an element with minimal distance to z (min(v-z))
  # -> that will be the cluster center
  
  mini<- Inf
  for (i in 1:som_size_x) {
    for (j in 1:som_size_y) {
      v[1:m] <- R[i,j,1:m]
      dif <- v-z
      skal<- sum(dif*dif)
      if (skal < mini) {
        mini <- skal; i_best <- i;j_best <- j
      }
    }
  }
  
  B[i_best,j_best] <- B[i_best, j_best]+1 
  
  # Calculate the distance between the cluster center and the remaining elements in R matrix
  # find the "neighboring" clusters
  
  for (i in 1:som_size_x){
    for (j in 1:som_size_y) {
      dist <- sqrt((i_best-i)^2 +(j_best-j)^2)
      
  # If element v_i,j ("neighbor") is within the radius of v, than it will be approximated to the element z in V input matrix
  # The larger the radius, the lesser will v_i,j be approxiamted to z    
      
      if (dist < radius) {
        beta <- alpha-dist*(alpha/radius)
        v[1:m] <- R[i,j,1:m]
        R[i,j,1:m]<- v+beta*(z-v)
      }
    }
  }
  
  iter <- iter+1
  
  # Compute new alpha  and radius
  
  alpha <- alpha*reject_factor
  radius <- min(som_size_x, som_size_y)*alpha
  
  if (alpha < 0.05) {
    continue <- FALSE
  }
}  

# Assignment of data points to cluster centers

clust_hist <- matrix(list(), som_size_x, som_size_y)
centers_hist <- array(rep(NA, som_size_x*som_size_y*dim(V)[2]), dim=c(som_size_x, som_size_y, dim(V)[2]))
qual <- matrix(list(),som_size_x, som_size_y)
quality <- 0
I <- seq(1:nrow(V))
  
for (q in 1:n) {
  mini <- Inf
  z <- V[q,]
  
for (i in 1:som_size_x){
  for (j in 1:som_size_y){
        v[1:m] <- R[i,j,1:m]
        dif <- v-z
        skal <- sum(dif*dif)
        if (skal < mini) {
          mini <- skal; i_best <- i;j_best <- j; #v_best<-v
        }
        
      }
 }

  clust_hist[[i_best,j_best]] <- c(clust_hist[[i_best,j_best]], I[q])
  centers_hist[i_best, j_best, 1:m] <- R[i_best,j_best,1:m]
  qual[[i_best,j_best]] <- c(qual[[i_best, j_best]], sqrt(mini))
  quality <- quality + sqrt(mini)
}  
  
quality <- quality/n
# print(paste("Quality: ", quality))
list(Clusters = clust_hist, Quality = quality, Centers = centers_hist)

}
