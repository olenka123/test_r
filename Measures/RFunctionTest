#require(e1071) 
#require(tseries)
require(forecast)
require(mgcv)
#require(fracdiff)
require(ggplot2)




### Functions for measuring characteristics of Time-Series/Curves ###
#####################################################################

# Euclidean distance
euclid.dist = function(x, na.rm = F) {

  if (NCOL(x) > 1)
    stop ("input data is not a vector or univariate time series")

  # If x contains missings and these are not removed (na.rm = F), the skewness is NA
  if (any(ina <- is.na(x))) {
    if (na.rm)
      x = x[!ina]
    else return(NA)
  }

  n = length(x)
  x_t0 = x[-1]
  x_t1 = x[-n]

  d = sqrt(sum((x_t0 - x_t1) ^ 2))  #dist(rbind(x1,x2))

  # cat("Euclidean Distance: ")
  # cat("\n")
  # cat(d)
  # cat("\n")

  return(d)
}


# Skewness
skewness.fun = function(x, na.rm = F) {
  
  if (NCOL(x) > 1) 
    stop ("input data is not a vector or univariate time series")
  
  # If x contains missings and these are not removed (na.rm = F), the skewness is NA
  if (any(ina <- is.na(x))) {
    if (na.rm) 
      x = x[!ina]
    else return(NA)
  }
  
  n = length(x)
  mean.x = x - mean(x)
  
  # Sample skewness (positive)
  #s = abs(mean((x-mean.x)^3,na.rm=TRUE)/sd(x)^3)
  
  #Sample skewness
  # y = sqrt(n) * sum(mean.x^3)/(sum(mean.x^2)^(3/2))
  # s = y * ((1 - 1/n))^(3/2)
  
  # Sample skewness
  s = (sum(mean.x^3)*1/n) / (sum(mean.x^2)*1/(n-1))^(3/2) 
 
  # cat("Skewness: ")
  # cat("\n")
  # cat(s)
  # cat("\n")
  
  return(s)
  
}

# Kurtosis
kurtosis.fun = function(x, na.rm = F) {
  
  if (NCOL(x) > 1) 
    stop ("input data is not a vector or univariate time series")
  
  # If x contains missings and these are not removed (na.rm = F), the kurtosis is NA
  if (any(ina <- is.na(x))) {
    if(na.rm)
      x = x[!ina]
    else return(NA)
  }
  
  n = length(x)
  mean.x = x - mean(x)
  k = (sum(mean.x^4) * 1/n) / ((sum(mean.x^2) *1/n)^2)
# k = mean((x - mean.x)^4)/sd(x)^4
  k = k - 3
  
  # cat("Kurtosis: ")
  # cat("\n")
  # cat(k)
  # cat("\n")
  
  return(k)
  
}

# Test for autocorrelation 
# Per default we compute first-order autocorrelation (for compting high-order autocorrelation adjust parameter 'lag')
Box_Pierce.test = function(x, lag = 1, na.rm = F, df = 0) {
  
  if (NCOL(x) > 1) 
    stop ("input data is not a vector or univariate time series")
  
  # If x contains missings and these are not removed (na.rm = F), the skewness is NA
  if (any(ina <- is.na(x))) {
    if(na.rm)
      x = x[!ina]
    else return(NA)
  }
  
  cor = acf(x, lag.max = lag, plot = F)  # computes autocorrelation
  
  n = length(x)
  coef = cor$acf[2:c(lag+1)] 
  chiq_stat = n*sum(coef^2) 
  p_val = 1 - pchisq(chiq_stat, lag - df)
  fitdf = lag - df
  dd.name = deparse(substitute(x))
  
  cat("Box Pierce Test of Autocorrelation: ")
  cat("\n")
  cat(paste0("Coefficient:", c(round(coef[1],3)), ", ", "X-Squared:", round(chiq_stat,2), ", ", "df: ", fitdf, ", ","p-value: ", p_val))
  cat("\n")
  
  res = list(Autocor.coef = coef, Chiq_stat = chiq_stat, p.value = p_val)
#  names(res) = c("Autocor.coef", "Chiq_Stat", "p.value")
  return(res)

} 


# Teraesvirta Neural Network Test for Non-linearity

nonlinearity.fun = function(x, na.rm = F) {
  
  if (NCOL(x) > 1) 
    stop ("input data is not a vector or univariate time series")
  
  # If x contains missings and these are not removed (na.rm = F), the skewness is NA
  if (any(ina <- is.na(x))) {
    if(na.rm)
      x = x[!ina]
    else return(NA)
  }
  
  res = terasvirta.test(x, lag = 1)
  print(res)
  
  return(res)
  
} 
#  

# Decomposing data into trend and seasonal components

# A trend pattern exists when there is a long-term change in the mean level.
# A seasonal pattern exists when a time-series is affected by seasonal factors, such as month of the year and day of the week.
# It is defined as the pattern that repeats itself over fixed intervals of time.


# To get the degree of the time series' trend and seasonality, the data needs to be decomposed the into trend, seasonal and error components : "Y_t = T_t +S_t + e_t
# Since not all data can be decomposed additively, it is first necessary to apply an automated Box-Cox transformation. We apply the Box-Cox transformation as implemented in the {forecast} package. 
# For seasonal time series, the transformed data was decomposed using an stl decomposition with periodic seasonality.
# For non-seasonal time series, the trend of the transformed data is estimated using penalized regression splines which is implemented in the {mgcv} package.

decompose.fun = function(x, transform = T, na.rm = F) {
  
  if (NCOL(x) > 1) 
    stop ("input data is not a vector or univariate time series")
  
  # Transform series using Box Cox transformation
  # The transformation is only done if the minimum of 'Y_t' non-negative
  # The transformation is carried out using 'Guerrero's method, where lambda minimizes the coefficient of variation for subseries of x
  
  if(transform & min(x, na.rm = TRUE) >= 0) {
    
    lambda = BoxCox.lambda(na.contiguous(x)) # Automatic selection of Box Cox transformation parameter 'lambda'
    # Apply on time series without missing values
    #    res = BoxCox(x,lambda)
    
    if (lambda < 0) {
      x[x < 0] = NA
    } else if (lambda == 0) { 
      res = log(x)
    } else {
      res = (sign(x) * abs(x)^lambda - 1)/lambda
    }
    
    
  } else {
    
    lambda = NULL
    transform = F
  }
  # If the data is seasonal, the transformation is carried out using STL procedure with fixed seasonality
  if(frequency(x) > 1) { 
    
    x.stl = stl(x, s.window = "periodic", na.action = na.contiguous) 
    season = x.stl$time.series[,1]
    trend = x.stl$time.series[,2]
    remainder = x - trend - season # (remainder= x.stl$time.series[,3])
  }
  
  # If the data is non-seasonal, the term S_t = 0 and T_t is estimated using a penalized regression spline as implemented in {mgvc}
  else {
    
    tt = 1:length(x)
    trend = rep(NA,length(x))
    trend[!is.na(x)] = fitted(gam(x ~ s(tt)))
    season = NULL
    remainder = x - trend
  }
  
  return(list(data = x,trend = trend,season = season,remainder = remainder,transform = transform,lambda = lambda))
}


# Measuring Periodicity

# If there is a seasonal pattern of a certain period, the length of that time period will be estimated.
# The periodicity is estimated by finding the maximum of spectral density.
# For time series with no seasonal pattern the period = 1.


periodicity.fun = function(x, na.rm = F) {  
  
  if (NCOL(x) > 1) 
    stop ("input data is not a vector or univariate time series")
  
  n = length(x)
  spec = spec.ar(c(na.contiguous(x)),plot = F) # estimate spectral density of a time series (find the frequency corresponding to the maximum of the spectral density)
  
  if(max(spec$spec) > 10) {
    period = floor(1/spec$freq[which.max(spec$spec)])
    
    if (period == Inf) { #Find next local maximum (locate at which frequency the peak is occurring)
      
      y = which(diff(spec$spec) > 0) # computes successive differences for x[(1+lag):n] - x[1:(n-lag)]
      
      if(length(y) > 0) {
        n.freq = length(spec$freq)   
        next.max = y[1] + which.max(spec$spec[(y[1] + 1): n.freq])
        period = floor(1/spec$freq[next.max])
        
      } else {
        period = 1
      }
    } 
  }
  else
    period = 1
  
  return(period)
} 



# Function for de-trending and de-seasonalizing data

detrend.fun = function(decomp.dd, period.dd){
  
  if (period.dd > 1) {
    
    # if(frequency(decomp.dd) > 1) {
    ts.comp = decomp.dd$trend + decomp.dd$season
  } else { 
    ts.comp = decomp.dd$trend # Non- seasonal data
  }
  detrend.data = decomp.dd$data - ts.comp + mean(decomp.dd$trend, na.rm = T) 
  
  return(detrend.data)
  
}

#  Measures of chaos (Lyapunov Exponent)
# LE is a measure of the divergence of nearby trajectories    

LyapunovExp.fun = function(x, period.dd) { 
  
  N = length(x)
  
  if (period.dd > N - 10)
    stop ("Insufficient amount of data")
  
  Ly = numeric(N - period.dd)
  
  for(i in 1:(N - period.dd)) {
    
    idx = order(abs(x[i] - x)) # idx where the distance to x[i] is smallest
    idx = idx[idx < (N - period.dd)] 
    j = idx[2] # take the nearby index with the smallest distance
    
    # Compute the divergence of the two nearby points
    Ly[i] = log(abs((x[i+period.dd] - x[j+period.dd])/(x[i]-x[j])))/period.dd
    if(is.na(Ly[i]) | Ly[i]==Inf | Ly[i]==-Inf)
      Ly[i] = NA
    
  }
  
  Lyap = mean(Ly,na.rm=TRUE)
  fLyap = exp(Lyap)/(1+exp(Lyap))
  return(fLyap)
  
}



# Calculating the measures
# In this function, The measures (mean, sd, skewness, kurtosis, etc.) are calculated on the original data

stat.measures = function(x) {
  
  freq = frequency(x)
  x = ts(x, f = freq)

  # First, the measures (mean, sd, skewness, kurtosis, etc.) are calculated on the original data
  # Compute Max
  max.x = max(x, na.rm = T)
  
  # Compute Min
  min.x = min(x, na.rm = T)
  
  # Compute Mean
  mean.x = mean(x, na.rm = T)
  
  # Compute Stand.Dev
  sd.x = sd(x, na.rm = T)
  
  # Compute Skewness
  skewness.x = skewness.fun(x, na.rm = T)
  
  # Compute Kurtosis
  kurtosis.x = kurtosis.fun(x, na.rm = T)
  
  # Compute Euclidean distance between t_0 and t_1
  euclid.dist.x = euclid.dist(x, na.rm = T)
  
  # Compute Serial Autocorrelation
  autocor.x = Box_Pierce.test(x, na.rm = T)
  autocor.coef.x = autocor.x$Autocor.coef
  autocor.chiq.test.x = autocor.x$Chiq_stat
  autocor.p_value.x = autocor.x$p.value
  
  # Compute Test for Non-linearity 
  nonlinearity.x = nonlinearity.fun(x, na.rm = T)
  nonlinearity.coef.x = nonlinearity.x$statistic
  nonlinearity.p_value.x = nonlinearity.x$p.value
  
  # Compute Periodicity (Frequency with which a certain pattern in ts appears)
  period.x = periodicity.fun(x)
  
  
  # Compare with the function frequency for ts
  freq.x = frequency(x)
  
  # Compute Lyapunov Exponent (measure of chaos)
  LyapunovExp.x = LyapunovExp.fun(x, period.x)
  
  # Decompose time-series data in to seasonal and trend pattern
#  if (class(x) == "ts") {
  decomp.x = decompose.fun(x) 
  
  if (period.x > 1) 
    # if(frequency(decomp.x) > 1) {
    ts.comp = decomp.x$trend + decomp.x$season
   else  
    ts.comp = decomp.x$trend # Non- seasonal data
    
  detrend.data = decomp.x$data - ts.comp + mean(decomp.x$trend, na.rm = T) 
  
  
  # # Adjust data
  # if(freq > 1)
  #   fits <- decomp.x$trend + decomp.x$season
  # else # Nonseasonal data
  #   fits <- decomp.x$trend
  # adj.x <- decomp.x$x - fits + mean(decomp.x$trend, na.rm=TRUE)
  # 
  
  
  # Compute Trend and Seasonal Measures
  v.detrend = var(detrend.data, na.rm = T)
  
  if (period.x > 1) {
    detrend = decomp.x$data - decomp.x$trend
    deseason = decomp.x$data - decomp.x$season
    trend.x = ifelse(var(deseason, na.rm = T) < 0.00001, 0, max(0, min(1, 1 - v.detrend/var(deseason, na.rm = T))))
    season.x = ifelse(var(detrend, na.rm = T) < 0.00001, 0, max(0, min(1, 1 - v.detrend/var(detrend, na.rm =T))))
    
  } else {
    # Non-Seasonal Data
    trend.x = ifelse(var(decomp.x$data, na.rm = T) < 0.00001, 0, max(0, min(1,1 - v.detrend/var(decomp.x$data, na.rm = T))))
    season.x = 0
  }
  
  #  Compute measures  for the adjusted/decomposed data (after removing trend and seasonality)
  
   
  # # Compute Skewness
  # skewness.decomp = skewness.fun(detrend.data, na.rm = T)
  # 
  # # Compute Kurtosis
  # kurtosis.decomp = kurtosis.fun(detrend.data, na.rm = T)
  # 
  # # Compute Euclidean distance between t_0 and t_1
  # euclid.dist.decomp = euclid.dist(detrend.data, na.rm = T)
  # 
  # # Compute Serial Autocorrelation
  # autocor.decomp = Box_Pierce.test(detrend.data, na.rm = T)
  # 
  # # Compute Test for Non-linearity 
  # nonlinearity.decomp = nonlinearity.fun(detrend.data, na.rm = T)
  # 
  # # Compute Lyapunov Exponent (measure of chaos)
  # LyapunovExp.decomp = LyapunovExp.fun(detrend.data, period.x)
  # 
  # 

  
  m = c(max.x, min.x, mean.x, sd.x, skewness.x, kurtosis.x, euclid.dist.x, period.x, freq.x, 
        autocor.coef.x,  autocor.chiq.test.x, autocor.p_value.x,  nonlinearity.coef.x, nonlinearity.p_value.x,
        LyapunovExp.x, trend.x, season.x)

  # m = c(max.x, min.x, mean.x, sd.x, skewness.x, kurtosis.x, euclid.dist.x, period.x, freq.x, 
  #       autocor.x, nonlinearity.x, LyapunovExp.x, trend.x, season.x, skewness.decomp, kurtosis.decomp,
  #       autocor.decomp, nonlinearity.decomp, LyapunovExp.decomp)
  
  names(m) = c("max", "min", "mean", "Sd.Dev", "skewness", "kurtosis", "first.order.euclid.dist", "periodicity",
            "frequency", "first.order.autocor", "autocor.box.test", "box.test.p.value","non-linearity.test", "non-linearity.p.value",
            "lyapunov.exp", "trend", "seasonality")
  return(m)
    
 
}







